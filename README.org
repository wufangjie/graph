* An easy to use, rust, graph algorithm implement
** there is at most one edge from one vertex to another (can be the same)

* Done
| core data structure                 |                       |
| easy to use/test macros             |                       |
| dfs                                 | dfs                   |
|                                     | iddfs                 |
| bfs                                 |                       |
| DAG's topological sort              | dfs                   |
|                                     | reference count       |
| strongly connected compoments (SCC) |                       |
| minimum spanning tree               | kruskal               |
|                                     | prim                  |
| single source shortest path         | dijkstra              |
|                                     | A*                    |
|                                     | bellman ford          |
|                                     | spfa                  |
| multiple sources shortest path      | johnson               |
|                                     | floyd warshall        |
| augment path                        | bipartite matching    |
|                                     | vertex disjoint paths |
|                                     | edge disjoint paths   |
| maxflow (ford fulkerson)            | edmonds karp          |
|                                     | dinic                 |

* Todo
| maxflow (ford fulkerson) | min-cost max-flow |

Put vertex and edge togethor in Graph seems not good design,
may be make an Edge trait is good choice (but how can a trait method return impl Iterator?)

* built-in testing graphs

** unweighted
#+CAPTION: graph for testing: scc | bfs | dfs | topological sort
[[./data/scc.png]]

#+CAPTION: graph for testing: maximum bipartite matching
[[./data/mbm.png]]

#+CAPTION: graph for testing: edge | vertex disjoint path
[[./data/dp.png]]

** weighted
#+CAPTION: graph for testing: prim | kruskal | bellman ford | dijkstra
[[./data/mst.png]]

#+CAPTION: graph for testing: A* algorithm
[[./data/spa.png]]

#+CAPTION: graph for testing: johnson | floyd warshall
[[./data/spn.png]]

#+CAPTION: graph for testing: maxflow
[[./data/mf.png]]
